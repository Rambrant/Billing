package com.tradedoubler.webservice.routing.invoicemessage;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import com.microsoft.schemas.netfx._2009._05.routing.IRequestReplyRouter;
import javax.xml.ws.Service;
import org.tempuri.MDSITGSInvMesService;

/**
 * This class was generated by Apache CXF 2.6.1
 * 2013-03-20T13:23:28.314+01:00
 * Generated source version: 2.6.1
 * 
 */
@WebServiceClient(name = "RoutingService", 
                  wsdlLocation = "http://tdaxaost01/MicrosoftDynamicsAXAif60/MDSITGSInvMes/xppservice.svc?wsdl",
                  targetNamespace = "http://tempuri.org/") 
public class RoutingService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "RoutingService");
    public final static QName ReqReplyEndpoint = new QName("http://tempuri.org/", "reqReplyEndpoint");
    public final static QName BasicHttpBindingMDSITGSInvMesService = new QName("http://tempuri.org/", "BasicHttpBinding_MDS_ITGSInvMesService");
    static {
        URL url = null;
        try {
            url = new URL("http://tdaxaost01/MicrosoftDynamicsAXAif60/MDSITGSInvMes/xppservice.svc?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(RoutingService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://tdaxaost01/MicrosoftDynamicsAXAif60/MDSITGSInvMes/xppservice.svc?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public RoutingService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public RoutingService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public RoutingService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns IRequestReplyRouter
     */
    @WebEndpoint(name = "reqReplyEndpoint")
    public IRequestReplyRouter getReqReplyEndpoint() {
        return super.getPort(ReqReplyEndpoint, IRequestReplyRouter.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns IRequestReplyRouter
     */
    @WebEndpoint(name = "reqReplyEndpoint")
    public IRequestReplyRouter getReqReplyEndpoint(WebServiceFeature... features) {
        return super.getPort(ReqReplyEndpoint, IRequestReplyRouter.class, features);
    }
    /**
     *
     * @return
     *     returns MDSITGSInvMesService
     */
    @WebEndpoint(name = "BasicHttpBinding_MDS_ITGSInvMesService")
    public MDSITGSInvMesService getBasicHttpBindingMDSITGSInvMesService() {
        return super.getPort(BasicHttpBindingMDSITGSInvMesService, MDSITGSInvMesService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MDSITGSInvMesService
     */
    @WebEndpoint(name = "BasicHttpBinding_MDS_ITGSInvMesService")
    public MDSITGSInvMesService getBasicHttpBindingMDSITGSInvMesService(WebServiceFeature... features) {
        return super.getPort(BasicHttpBindingMDSITGSInvMesService, MDSITGSInvMesService.class, features);
    }

}
